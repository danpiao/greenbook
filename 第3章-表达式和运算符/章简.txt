3.1 原始表达式
3.2 对象和数组的初始化表达式
3.3 函数定义表达式
    var square = function(x){return x*x}

    函数声明
    function square(x){return x*x}
3.4 属性访问表达式
3.5 调用表达式
3.6 对象创建表达式


3.7 运算符概述
    3.7.1 操作数的个数
        一元运算符，二元运算符，三元运算符
    3.7.2 操作数类型和结果类型
    3.7.3 左值
    3.7.4 运算符的副作用
    3.7.5 运算符优先级
    3.7.6 运算符的结合性
    3.7.8 运算顺序
3.8 算术表达式
    3.8.1 "+"运算符
    3.8.2 一元运算符
    3.8.3 位运算符
3.9 关系表达式
    3.9.1 相等和不等运算符
    3.9.2 比较运算符
    3.9.3 in运算符
        in运算符希望它的左操作数是一个字符串或可以转换为字符串，希望它的右操作数是一个对象。如果右侧的对象拥有一个名为左操作数值的属性名，那么表达式返回true:
        var point = {x:1,y:1};
        'x' in point;//true:对象有一个名为'x'的属性
        'z' in point;//false
        'toString' in point;//true:对象继承了toString()方法
    3.9.4 instanceof运算符
        希望左操作数是一个对象，右操作数标识对象的类。如果左侧的对象是右侧类的实例，则表达式返回true，否则返回false。javascript中对象的类是通过初始化它们的构造函数来定义的，instanceof的右操作应当是一个函数
        var d = new Date();
        d instanceof Date;// =>true，d是由Date()创建的
        d instanceof Object;// =>true，所有的对象都是Object的实例
        d instanceof Number;// =>false，d不是一个Number对象
        所有的对象都是Object的实例，当通过instanceof判断一个对象是否是一个类的实例的时候，这个判断也会包含对“父类”的检测，如果instanceof的左操作数不是对象的话，instanceof返回false，如果右操作数不是函数，则抛出一个类型错误异常
3.10 逻辑表达式
    3.10.1 逻辑与(&&)
    3.10.2 逻辑或(||)
    3.10.3 逻辑非(!)
3.11 赋值表达式
3.12 表达式计算
    3.12.1 eval()
        eval()只有一个参数。如果传入的参数不是字符串，它直接返回这个参数。
    3.12.2 全局eval()
    3.12.3 严格eval()
3.13 其他运算符
    3.13.1 条件运算符(?:)
    3.13.2 typeof运算符
    3.13.3 delete运算符
    3.13.4 void运算符
    3.13.5 逗号运算符(,)



    前置/后置递增/递减
    var num1 = 1;
    var num2 = ++num1 + num1++
    console.log(num2);//4
    console.log(num1);//3
    
    var num1 = 1;
    var num2 = num1++ + num1++;
    console.log(num2);//3
    console.log(num1);//3

    var num1 = 1;
    var num2 = ++num1 + ++num1;
    console.log(num2);//5
    console.log(num1);//3