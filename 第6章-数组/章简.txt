6.1 创建数组
6.2 数组元素的读和写
6.3 稀疏数组
    稀疏数组就是包含从0开始的不连续索引的数组。如果数组是稀疏的，length属性值大于元素的个数。可以用Array()构造函数或简单地指定数组的索引值大于当前的数组长度来创建稀疏数组。
    a = new Array();//数组没有元素，但是a.length是5
    a = [];//创建一个空数组，length=0
    a[1000] = 0;//赋值添加一个元素，但是设置length为1001

    当在数组直接量中省略值时不会创建稀疏数组。省略的元素在数组中是存在的，其值为undefined。这和数组元素根本不存在是有一些微妙的区别。可以用in操作符检测两者之间的区别：
    var a1 = [,,,];//数组是[undefined,undefined,undefined]
    var a2 = new Array(3);//该数组根本没有元素
    0 in a1;// =>true：a1在索引0处有一个元素
    0 in a2;// =>false：a2在索引0处没有元素

    当省略数组直接量中的值时，这时所得到的数组也是稀疏数组，省略掉的值是不存在的：
    var a1 = [,];//此数组没有元素，长度是1
    var a2 = [undefined];//此数组包含一个值为undefined的元素
    0 in a1;// =>false：a1在索引0处没有元素
    0 in a2;// true：a2在索引0处有一个值为undefined的元素

6.4 数组长度
6.5 数组元素的添加和删除
    push()：在数组末尾添加一个或多个元素
    unshift()：在数组的头部插入一个元素
    pop()：删除末尾一个元素
    shift()：删除数组头部一个元素

6.6 数组遍历
    排除null、undefined和不存在的元素：
    for(var i = 0;i < a.length;i++){
        if(!a[i]){
            continue;//跳过null、undefined和不存在的元素
        }
        //循环体
    }

    跳过undefined和不存在的元素：
    for(var i = 0;i < a.length;i++){
        if(a[i] === undefined){
            continue;//跳过undefined和不存在的元素
        }
        //循环体
    }

    跳过不存在的元素而仍然要处理存在的undefined元素：
    for(var i = 0;i < a.length;i++){
        if(!(i in a)){
            continue;//跳过不存在的元素
        }
        //循环体
    }

    可以使用for/in循环处理稀疏数组。循环每次将一个可枚举的属性名（包括数组索引）赋值给循环变量。不存在的索引将不会遍历到：
    for(var index in sparseArray){
        var value = sparseArray[index];
        // 此处可以使用索引和值做一些事情
    }

    for/in循环能够枚举继承的属性名。由于这个原因，在数组上不应该使用for/in循环，除非使用额外的检测方法来过滤不想要的属性：
    for(var i in a){
        if(!a.hasOwnProperty(i)){
            continue;//跳过继承的属性
        }
    }

    跳过不是非负整数的i
    for(var i in a){
        if(String(Math.floor(Math.abs(Number(i)))) !== i){
            continue;
        }
    }

    ECMA 5定义了一些遍历数组元素的新方法，按照索引的顺序按个传递给定义的一个函数：
    var data = [1,2,3,4,5];//这是需要遍历的数组
    var sumOfSquares = 0;//要得到数据的平方和
    data.forEach(//把每个元素传递给此函数
        function(x){
            sumOfSquares = sumOfSquares + x*x;
        }
    )
    sumOfSquares;// =>55:1+4+9+16+25

6.7 多维数组
    使用二维数组作为一个九九乘法表：
    //创建一个多维数组
    var table = new Array(10);//表格有10行
    for(var i = 0;i < table.length;i++){
        table[i] = new Array(10);//每行有10列
    }
    //初始化数组
    for(var row = 0;row < table.length;row++){
        for(var col = 0;col < table[row].length;col++){
            table[row][col] = row*col;
        }
    }
    //使用多维数组来计算（查询）5*7
    var product = table[5][7];

6.8 数组方法
    6.8.1 join()
        Array.join()方法将数组中所有元素都转化为字符串并连接在一起，返回最后生成的字符串。可以指定一个可选的字符串在生成的字符串中来分隔数组的各个元素。如果不指定分隔符，默认使用逗号：
        var a = [1,2,3];//创建一个包含三个元素的数组
        a.join();// =>'1,2,3'
        a.join(' ');// =>'1 2 3'
        a.join('');// =>'123'
        var b = new Array(10);//长度为10的空数组
        b.join('-');// =>'---------'：9个连字号组成的字符串
        Array.join()方法是String.split()方法的逆向操作，后者是将字符串分隔成若干块来创建一个数组。

    6.8.2 reverse()
        Array.reverse()方法将数组中的元素颠倒顺序，返回逆序的数组。它采取了替换：换句话说，它不通过重新排序的元素创建新的数组，而是在原先的数组中重新排序他们：
        var a = [1,2,3];
        a.reverse().join();// =>'3,2,1'，并且现在a是[3,2,1]

    6.8.3 sort()
        Array.sort()方法将数组中的元素排序并返回排序后的数组。当不带参数调用sort()时，数组元素以字母表顺序排序（如有必要将临时转化为字符串进行比较）：
        var a = new Array('banana','cherry','apple');
        a.sort();
        var s = a.join(',');// =>'apple,banana,cherry'
        如果数组包含undefined元素，它们会被排到数组的尾部

        为了按其他方式而非字母表顺序进行数组排序，必须给sort()方法传递一个比较函数。该函数决定了它的两个参数在排好序的数组中的先后顺序。假设第一个参数应该在前，比较函数应该返回一个小于0的数值，反之，假设第一个参数应该在后，函数应该返回一个大于0的数值。并且，假设两个值相等（也就是说，它们的排序无关紧要），函数应该返回0。因此，用数值大小而非字母表顺序进行数组排序：
        var a = [33,4,1111,222];
        a.sort();// 字母表顺序：[1111,222,33,4]
        a.sort(
            function(a,b){
                return a-b;//根据顺序，返回负数、0、正数
            }
        );//[4,33,222,1111]
        a.sort(function(a,b){return b-a});//数值大小相反的顺序：[1111,222,33,4]
        注意，这里使用匿名函数表达式非常方便。既然比较函数只使用一次，就没必要给它们命名

        对一个字符串数组执行不区分大小写的字母表排序，比较函数首先将参数都转化为小写字符串（使用toLowerCase()方法），再开始比较：
        a = ['ant','Bug','cat','Dog'];
        a.sort();//区分大小写的排序：['Bug','Dog','ant','cat']
        a.sort(
            function(s,t){
                var a = s.toLowerCase();
                var b = t.toLowerCase();
                if(a < b){
                    return -1;
                }
                if(a > b){
                    return 1;
                }
                return 0;
            }
        );//['ant','Bug','cat','Dog']

    6.8.4 concat()
        Array.concat()方法创建并返回一个新数组，它的元素包括调用concat()的原始数组的元素和concat()的每个参数。如果这些参数中的任何一个自身是数组，则连接的是数组的元素，而非数组本身。但是注意，concat()不会递归扁平化数组的数组。concat()也不会修改调用的数组：
        var a = [1,2,3];
        a.concat(4,5);// =>[1,2,3,4,5]
        a.concat([4,5]);// =>[1,2,3,4,5]
        a.concat([4,5],[6,7]);// =>[1,2,3,4,5,6,7]
        a.concat(4,[5,[6,7]]);// =>[1,2,3,4,5,[6,7]]

    6.8.5 slice()
        Array.slice()方法返回指定数组的一个片段或子数组。它的两个参数分别指定了片段的开始和结束的位置。返回的数组包含第一个参数指定的位置和所有到但不包含第二个参数指定的位置之间的所有数组元素。如果只指定一个参数，返回的数组将包含从开始位置到数组结尾的所有元素。如果参数是负数，它表示相对于数组中最后一个元素的位置：
        var a = [1,2,3,4,5];
        a.slice(0,3);// =>[1,2,3]
        a.slice(3);// =>[4,5]
        a.slice(1,-1);// =>[2,3,4]
        a.slice(-3,-2);// =>[3]

    6.8.6 splice()
        Array.splice()方法是在数组中插入或删除元素的通用方法。不同于slice()和concat()，splice()会修改调用的数组。
        splice()能够从数组中删除元素、插入元素到数组中或者同时完成这两种操作。在插入或删除点之后的数组元素会根据需要增加或减小它们的索引值，因此数组的其他部分仍然保持连续的。splice()的第一个参数指定了插入或删除的起始位置。第二个参数指定了应该从数组中删除的元素的个数。splice()返回一个由删除元素组成的数组，或者如果没有删除元素就返回一个空数组：
        var a = [1,2,3,4,5,6,7,8];
        a.splice(4);// =>返回[5,6,7,8];a是[1,2,3,4]
        a.splice(1,2);// =>返回[2,3];a是[1,4]
        a.splice(1,1);// =>返回[4];a是[1]

        splice()的前两个参数指定了需要删除的数组元素。紧跟其后的任意个数的参数指定了需要插入到数组中的元素，从第一个参数指定的位置开始插入：
        var a = [1,2,3,4,5];
        a.splice(2,0,'a','b');//返回[];a是[1,2,'a','b',3,4,5]
        a.splice(2,2,[1,2],3);//返回['a','b'];a是[1,2,[1,2],3,3,4,5]

    6.8.7 push()和pop()
        push()和pop()方法允许将数组当做栈来使用。push()方法在数组的尾部添加一个或多个元素，并返回数组新的长度。pop()方法则相反：它删除数组的最后一个元素，减小数组长度并返回它删除的值。注意，两个方法都修改并替换原始数组而非生成一个修改版的新数组。组合使用push()和pop()能够用javascript数组实现先进后出的栈：
        var stack = [];// stack:[]
        stack.push(1,2);// stack:[1,2]
        stack.pop();// stack:[1]
        stack.push(3);// stack:[1,3]
        stack.pop();// stack:[1]
        stack.push([4,5]);// stack:[1,[4,5]]
        stack.pop();// stack:[1]
        stack.pop();// stack:[]

    6.8.8 unshift()和shift()
        unshift()和shift()方法非常类似push()和pop(),unshift()在数组的头部添加一个或多个元素，并将已存在的元素移动到更高索引的位置来获得足够的空间，最后返回数组新的长度。shift()删除数组的第一个元素并将其返回，然后把所有的元素下移一个位置来填补数组头部的空缺：
        var a = [];// a:[]
        a.unshift(1);// a:[1]
        a.unshift(22);// a:[22,1]
        a.shift();// a[1]
        a.unshift(3,[4,5]);// a:[3,[4,5],1]
        a.shift();// a:[[4,5],1]
        a.shift();// a:[1]
        a.shift();// a:[]

    6.8.9 toString()和toLocaleString()
        数组和其他javascript对象一样拥有toString()方法。针对数组，该方法将其每个元素转化为字符串（如有必要将调用元素的toString()方法）并且输出用逗号分隔的字符串列表。注意，输出不包括方括号或其他任何形式的包裹数组值的分隔符：
        [1,2,3].toString();// =>'1,2,3'
        ["a","b","c"].toString();// =>'a,b,c'
        [1,[2,'c']].toString();// =>'1,2,c'

        toLocaleString()是toString()方法的本地化版本。它调用元素的toLocaleString()方法将每个数组元素转化为字符串，并且使用本地化（和自定义实现的）分隔符将这些字符串连接起来生成最终的字符串。

6.9 ECMA 5中的数组方法
    ECMA 5定义了9种新的数组方法来遍历、映射、过滤、检测、简化和搜索数组。
    大多数方法的第一个参数接收一个函数，并且对数组的每个元素（或一些元素）调用一次该函数。如果是稀疏数组，对不存在的元素不调用传递的函数。在大多数情况下，调用提供的函数使用使用三个参数：数组元素、元素的索引和数组本身。通常，只需要第一个参数值，可以忽略后两个参数。大多数ECMA 5数组方法的第一个参数是一个函数，第二个参数是可选的。如果有第二个参数，则调用的函数被看做是第二个参数的方法。也就是说，在调用函数时传递进去的第二个参数作为它的this关键字的值来使用。被调用的函数的返回值非常重要，但是不同的方法处理返回值的方式也不一样。ECMA 5中的数组方法都不会修改它们调用的原始数组。传递给这些方法的函数是可以修改这些数组的。
    6.9.1 forEach()
        forEach()方法从头至尾遍历数组，为每个元素调用指定的函数。传递的函数作为forEach()的第一个参数。然后forEach()使用三个参数调用该函数：数组元素、元素的索引和数组本身。如果只关心数组元素的值，可以编写只有一个参数的函数---额外的参数将忽略：
        var data = [1,2,3,4,5];
        //计算数组元素的和值
        var sum = 0;
        data.forEach(
            function(value){
                sum += value;
            }
        );
        sum;// =>15
        //每个数组元素的值自加1
        data.forEach(
            function(v,i,a){
                a[i] = v + 1;
            }
        );
        data;// =>[2,3,4,5,6]

        注意，forEach()无法在所有元素都传递给调用的函数之前终止遍历。也就是说，没有像for循环中使用的相应的break语句。如果要提前终止，必须把forEach()方法放在一个try块中，并能抛出一个异常。如果forEach()调用的函数抛出foreach.break异常，循环会提前终止：
        function foreach(a,f,t){
            try{
                a.forEach(f,t);
            }catch(e){
                if(e === foreach.break){
                    return;
                }else{
                    throw e;
                }
            }
        }
        foreach.break = new Error('StopIteration');

    6.9.2 map()
        map()方法将调用的数组的每个元素传递给指定的函数，并返回一个数组，它包含该函数的返回值：
        a = [1,2,3];
        b = a.map(
            function(x){
                return x*x;
            }
        );// =>[1,4,9]
        传递给map()的函数的调用方式和传递给forEach()的函数的调用方式一样。但传递给map()的函数应该有返回值。注意，map()返回的是新数组：它不会修改调用的数组。如果是稀疏数组，返回的也是相同方式的稀疏数组：它具有相同的长度，相同的缺失元素。

    6.9.3 filter()
        filter()方法返回的数组元素是调用的数组的一个子集。传递的函数是用来逻辑判定的：该函数返回true或false。调用判定函数就像forEach()和map()一样。如果返回值为true或能转化为true的值，那么传递给判定函数的元素元素就是这个子集的成员，它将被添加到一个作为返回值的数组中：
        a = [5,4,3,2,1];
        smallvalues = a.filter(
            function(x){
                return x<3;
            }
        );// =>[2,1]
        everyother = a.filter(
            function(x,i){
                return i%2 == 0;
            }
        );// =>[5,3,1]
        filter()会跳过稀疏数组中缺少的元素，它的返回数组总是稠密的。为了压缩稀疏数组的空缺：
        var dense = sparse.filter(
            function(){
                return true;
            }
        );
        压缩空缺并删除undefined和null元素：
        a = a.filter(
            function(x){
                return x!== undefined && x!==null;
            }
        );

    6.9.4 every()和some()
        every()和some()方法是数组的逻辑判定：它们对数组元素应用指定的函数进行判定，返回true或false
        every()方法就像数学中的“针对所有”的量词：当且仅当针对数组中的所有元素调用判定函数都返回true，它才返回true：
        a = [1,2,3,4,5];
        a.every(
            function(x){
                return x<10;
            }
        );// =>true：所有值<10
        a.every(
            function(x){
                return x%2 === 0;
            }
        );// =>false：不是所有的值都是偶数
        some()方法就像数学中的“存在”的量词：当数组中至少有一个元素调用判定函数返回true，它就返回true；并且当且仅当数值中的所有元素调用判定函数都返回false，它才返回false：
        a = [1,2,3,4,5];
        a.some(
            function(x){
                return x%2 === 0;
            }
        );// =>true：a含有偶数值
        a.some(isNaN);// =>false：a不包含非数值元素
        注意，一旦every()和some()确认该返回什么值它们就停止遍历数组元素。some()在判定函数第一次返回true后就返回true，但是如果判定函数一直返回false，它将会遍历整个数组。every()恰好相反：它在判定第一次返回false后就返回false，但如果判定函数一直返回true，它将遍历整个数组。注意，根据数学上的惯例，在空数组上调用时，every()返回true，some()返回false

    6.9.5 reduce()和reduceRight()
        reduce()和reduceRight()方法使用指定的函数将数组元素进行组合，生成单个值：
        var a = [1,2,3,4,5];
        var sum = a.reduce(
            function(x,y){
                return x+y;
            },
            0
        );// =>15:数组求和
        var product = a.reduce(
            function(x,y){
                return x*y
            },
            1
        );// =>120:数组求积
        var max = a.reduce(
            function(x,y){
                return (x>y)?x:y;
            }
        );// =>5:求最大值
        reduce()需要两个参数。第一个是执行此化简操作的函数。化简函数的任务就是用某种方法把两个值组合或化简为一个值，并返回化简后的值。第二个参数（可选）是一个传递给函数的初始值。
        当不指定初始值调用reduce()时，它将使用数组的第一个元素作为初始值。
        在空数组上，不带初始值参数调用reduce()将导致类型错误异常。如果调用它的时候只有一个值---数组只有一个元素并且没有指定初始值，或者有一个空数组并且指定一个初始值---reduce()只是简单地返回那个值而不会调用简化函数。

        reduceRight()的工作原理和reduce()一样，不同的是它按照数组索引从高到低（从右到左）处理数组：
        var a = [2,3,4];
        //计算2^(3^4)乘方操作的优先顺序是从右到左
        var big = a.reduceRight(
            function(accumulator,value){
                return Math.pow(value,accumulator);
            }
        );

    6.9.6 indexOf()和lastIndexOf()
        indexOf()和lastIndexOf()搜索整个数组中具有给定值的元素，不接受一个函数作为其参数，返回找到的第一个元素的索引或如果没有找到就返回-1.indexOf()从头至尾搜索，而lastIndexOf()则反向搜索。
        a = [0,1,2,1,0];
        a.indexOf(1);// =>1:a[1]是1
        a.lastIndexOf(1);// =>3:a[3]是1
        a.indexOf(3);// =>-1:没有值为3的元素

6.10 数组类型
    判定一个未知对象是否为数组，在ECMA 5中可以使用Array.isArray()函数来做这件事：
    Array.isArray([]);// =>true
    Array.isArray({});// =>false
    使用instanceof的问题在web浏览器中有可能有多个窗口或窗体（frame）存在。每个窗口都有自己的javascript环境，有自己的全局对象。并且，每个全局对象有自己的一组构造函数。因此一个窗体中的对象将不可能是另一个窗体中的构造函数的实例。这个问题足以证明instanceof操作符不能视为一个可靠的数组检测方法。
    解决检查对象的类属性：
    var isArray = Function.isArray || function(o){
        return typeof o === "Object" && Object.prototype.toString.call(o) === "[object Array]";
    }

6.11 类数组对象
    javascript数组的有一些特性是其他对象所没有的：
    .当有新的元素添加到类表中时，自动更新length属性
    .设置length为一个较小值将截断数组
    .从Array.prototype中继承一些有用的方法
    .其类属性为"Array"
    为一个常规对象增加一些属性使其成类数组对象，然后遍历生成的伪数组的“元素”：
    var a = {};
    //添加一些属性，称为“类数组”
    var i = 0;
    while(i<10){
        a[i] = i*i;
        i++;
    }
    a.length = i;
    //现在当真正的数组遍历它
    var total = 0;
    for(var j = 0;j < a.length;j++){
        total += a[j];
    }

    Arguments对象就是一个类数组对象。在客户端javascript中，一些DOM方法（如document.getElementsByTagName()）也返回类数组对象。检测类数组对象：
    //判定o是否是一个类数组对象
    //字符串和函数有length，但是它们
    //可以用typeof检测将其排除，在客户端javascript中，DOM文本节点
    //也有length属性，需要用额外判断o.nodeType != 3将其排除
    function isArrayLike(o){
        if(
            o && //o非null、undefined等
            typeof o === "object" && //o是对象
            isFinite(o.length) && //o.length是有限数值
            o.length >= 0 && //o.length为非负数
            o.length === Math.floor(o.length) && //o.length是整数
            o.length < 4294967296 //o.length < 2^32
        ){
            return true; //o是类数组对象
        }else{
            return false;
        }
    }

    类数组对象没有继承自Array.prototype,就不能再它们上面直接调用数组方法，可以间接地使用Function.call方法调用：
    var a = {"0":"a","1":"b","2":"c",length:3};//类数组对象
    Array.prototype.join.call(a,"+");// =>"a+b+c"
    Array.prototype.slice.call(a,0);// =>["a","b","c"]:真正数组的副本
    Array.prototype.map.call(a,function(){
        return x>toUpperCase();
    });// =>["A","B","C"]

6.12 作为数组的字符串
    在ECMA 5中，字符串的行为类似于只读的数组。除了用charAt()方法来访问单个的字符以外，还可以用方括号：
    var s = test;
    s.charAt(0);// =>'t'
    s[1];// =>'e'
    针对字符串的typeof操作符仍然返回"string"，但是给Array.isArray()传递字符串，它将返回false。
    可索引的字符串的最大好处就是简单，用方括号代替了charAt()调用，这样更加简洁、可读并且可能更高效。字符串的行为类似数组的事实使得通用的数组方法可以应用到字符串上：
    s = "JavaScript";
    Array.prototype.join.call(s," ");// =>"J a v a S c r i p t"
    Array.prototype.filter.call(s,
    function(x){
        return x.match(/[^aeiou]/);//只匹配非元音字母
    }).join("");// =>"JvScrpt"
    字符串是不可变值，故当把它们作为数组看待时，它们是只读的。push()、sort()、reverse()和splice()等数组方法会修改数组，它们在字符串上是无效的。